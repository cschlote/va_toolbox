# Use Ubuntu-based dev image with some D compilers and dub installed
default:
  image: "gitlab.vahanus.net:5050/vahanus/public/container-ubuntu-dlang-dev:latest"
  before_script:
    - command -v image-info.sh && image-info.sh || true

variables:
  # For non-Kubernetes executors, we use tcp://docker:2375
  DOCKER_HOST: tcp://docker:2375
  # This will instruct Docker not to start over TLS.
  DOCKER_TLS_CERTDIR: ""
  # When using dind, it's wise to use the overlayfs driver for
  # improved performance.
  DOCKER_DRIVER: overlay2
  # We can pass ENV vars to the pipeline
  VA_TEST: "abc"
  # The Base-Path to the package-repository
  CI_PKGBASE_URL: "$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/va-toolbox/$CI_COMMIT_TAG"

stages:
  - lint
  - build
  - test
  - package
  - release

#-- Do linting on the supplied sources --------------------------------------

lint d-language:
  tags:
    - gitlabdocker
  stage: lint
  script:
      - mkdir -p build
      - ./scripts/lint-sources.sh | tee build/linter.log || true
      - if grep error linter.log ; then echo "found linter error"; false; fi
  cache:
    key: "DUB-CACHE"
    untracked: true
    paths:
      - .dub/
  artifacts:
    paths:
      - build/linter.log

lint scripts:
  image: docker:latest
  services:
    - docker:dind
  tags:
    - gitlabdocker
  stage: lint
  script:
    - mkdir -p build
    - ./scripts/lint-scripts.sh | tee build/linter2.log || true
    - if grep error linter2.log ; then echo "found linter error"; false; fi
  artifacts:
    paths:
      - build/linter2.log


#-- Build the application ---------------------------------------------------

build app and docs:
  tags:
    - gitlabdocker
  stage: build
  script:
    - ./scripts/build.sh
  cache:
    key: "DUB-CACHE"
    untracked: true
    paths:
      - .dub/
  artifacts:
    paths:
      - libva_toolbox.a
      - docs/
      - docs.json

#-- Test the application ----------------------------------------------------

test app:
  tags:
    - gitlabdocker
  stage: test
  script:
    - ./scripts/test.sh
  cache:
    key: "DUB-CACHE"
    untracked: true
    paths:
      - .dub/
  artifacts:
    paths:
      - source*.lst
      - coverage.json
  coverage: '/\d+\.\d+\%? covered/'  # Regex f√ºr Coverage-Wert

#-- Deploy the application --------------------------------------------------

package-job:
  tags:
    - gitlabdocker
  stage: package
  script:
    - ./scripts/package.sh
    - |
      set -x
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" \
              --upload-file ./va-toolbox-bin.zip \
              "$CI_PKGBASE_URL/va-toolbox-bin.zip"
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" \
              --upload-file ./va-toolbox-docs.zip \
              "$CI_PKGBASE_URL/va-toolbox-docs.zip"
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" \
              --upload-file ./va-toolbox-coverage.zip \
              "$CI_PKGBASE_URL/va-toolbox-coverage.zip"
      set +x
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v.*/'
      when: on_success
  artifacts:
    paths:
      - va-toolbox-bin.zip
      - va-toolbox-docs.zip
      - va-toolbox-coverage.zip

pages:
  tags:
    - gitlabdocker
  stage: release
  script:
    - echo "Create GitLab pages for branch $CI_COMMIT_REF_NAME"
    - mv docs public
    - du -h public
    - echo "The site will be deployed to $CI_PAGES_URL"
  rules:
    # This ensures that only pushes to the default branch will trigger a pages deploy
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_REF_NAME == "testing"
  artifacts:
    paths:
      # The folder that contains the files to be exposed at the Page URL
      - public

release-job:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  tags:
    - gitlabdocker
  stage: release
  script:
    - echo "Create GitLab release for $CI_COMMIT_REF_NAME"
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v.*/'
      when: on_success
  release:
    tag_name: $CI_COMMIT_TAG
    name: "Release $CI_COMMIT_TAG"
    description: "$CI_COMMIT_TAG_MESSAGE"
    assets:
      links:
        - name: "Download Binary ZIP"
          url: "$CI_PKGBASE_URL/va-toolbox-bin.zip"
        - name: "Download Docs ZIP"
          url: "$CI_PKGBASE_URL/va-toolbox-docs.zip"
        - name: "Download Coverage ZIP"
          url: "$CI_PKGBASE_URL/va-toolbox-coverage.zip"
